{"version":3,"sources":["../src/delay-promise-x.js"],"names":[],"mappings":"AAAA;;;;;AAMA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,KAAP,MAAkB,cAAlB;AACA,OAAO,UAAP,MAAuB,qBAAvB;AACA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,cAAP,MAA2B,0BAA3B;AACA,OAAO,gBAAP,MAA6B,sBAA7B;AAEA,IAAM,gBAAgB,GAAG,gBAAzB;AACA,IAAM,gBAAgB,GAAG,UAAzB;AACA,IAAI,QAAQ,GAAG,UAAf;AAEA;;;;;;;;AAOA,IAAM,YAAY,GAAG,SAAS,YAAT,CAAsB,YAAtB,EAAoC,KAApC,EAA2C;AAC9D,MAAM,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC,YAAD,CAAV,EAA0B,gBAA1B,CAAhB;AAEA,SAAO,SAAS,CAAC,MAAV,GAAmB,CAAnB,GACH,QAAQ,CAAC,OAAT,CAAiB,KAAjB,EAAwB,IAAxB,CAA6B,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AACvD;AACA,WAAO,YAAY,CAAC,EAAD,CAAZ,CAAiB,IAAjB,CAAsB,SAAS,SAAT,GAAqB;AAChD,aAAO,GAAP;AACD,KAFM,CAAP;AAGD,GALD,CADG,GAOH,IAAI,QAAJ,CAAa,SAAS,eAAT,CAAyB,OAAzB,EAAkC,MAAlC,EAA0C;AACrD,QAAM,aAAa,GAAG,OAAO,CAAC,gBAAD,EAAmB,OAAnB,EAA4B,EAA5B,CAA7B;AAEA;;AACA,QAAI,aAAa,CAAC,KAAlB,EAAyB;AACvB,MAAA,MAAM,CAAC,aAAa,CAAC,KAAf,CAAN;AACD;AACF,GAPD,CAPJ;AAeD,CAlBD;;AAoBA,cAAc,CAAC,YAAD,EAAe,SAAf,EAA0B;AACtC,EAAA,UAAU,EAAE,IAD0B;AAEtC,EAAA,GAFsC,iBAEhC;AACJ,WAAO,QAAP;AACD,GAJqC;AAKtC,EAAA,GALsC,eAKlC,KALkC,EAK3B;AACT,IAAA,QAAQ,GAAG,gBAAgB,CAAC,KAAD,CAA3B;AACD;AAPqC,CAA1B,CAAd;AAUA,eAAe,YAAf","file":"delay-promise-x.esm.js","sourcesContent":["/**\n * @file Utility that creates a delayed promise.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module delayPromise\n */\n\nimport toInteger from 'to-integer-x';\nimport clamp from 'math-clamp-x';\nimport PromiseCtr from '@xotic750/promise-x';\nimport attempt from 'attempt-x';\nimport defineProperty from 'object-define-property-x';\nimport assertIsFunction from 'assert-is-function-x';\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\nconst nativeSetTimeout = setTimeout;\nlet $Promise = PromiseCtr;\n\n/**\n * Create a delayed promise.\n *\n * @param {(number|string)} milliseconds - The number of milliseconds to delay by.\n * @param {*} [value] - The value to be resolved with.\n * @returns {Promise} The delayed promise.\n */\nconst delayPromise = function delayPromise(milliseconds, value) {\n  const ms = clamp(toInteger(milliseconds), MAX_SAFE_INTEGER);\n\n  return arguments.length > 1\n    ? $Promise.resolve(value).then(function valueExecutor(arg) {\n        /* eslint-disable-next-line promise/no-nesting */\n        return delayPromise(ms).then(function returnArg() {\n          return arg;\n        });\n      })\n    : new $Promise(function timeoutExecutor(resolve, reject) {\n        const attemptResult = attempt(nativeSetTimeout, resolve, ms);\n\n        /* istanbul ignore if */\n        if (attemptResult.threw) {\n          reject(attemptResult.value);\n        }\n      });\n};\n\ndefineProperty(delayPromise, 'Promise', {\n  enumerable: true,\n  get() {\n    return $Promise;\n  },\n  set(value) {\n    $Promise = assertIsFunction(value);\n  },\n});\n\nexport default delayPromise;\n"]}